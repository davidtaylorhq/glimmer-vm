/* This file is generated by build/debug.js */

import type { Nullable, VmMachineOp, VmOp } from '@glimmer/interfaces';
import {
  APPEND_DOCUMENT_FRAGMENT_OP,
  APPEND_HTML_OP,
  APPEND_NODE_OP,
  APPEND_SAFE_HTML_OP,
  APPEND_TEXT_OP,
  ASSERT_SAME_OP,
  BEGIN_COMPONENT_TRANSACTION_OP,
  BIND_DYNAMIC_SCOPE_OP,
  BIND_EVAL_SCOPE_OP,
  CAPTURE_ARGS_OP,
  CHILD_SCOPE_OP,
  CLOSE_ELEMENT_OP,
  COMMENT_OP,
  COMMIT_COMPONENT_TRANSACTION_OP,
  COMPILE_BLOCK_OP,
  COMPONENT_ATTR_OP,
  CONCAT_OP,
  CONSTANT_OP,
  CONSTANT_REFERENCE_OP,
  CONTENT_TYPE_OP,
  CREATE_COMPONENT_OP,
  CURRY_OP,
  DEBUGGER_OP,
  DID_CREATE_ELEMENT_OP,
  DID_RENDER_LAYOUT_OP,
  DUP_OP,
  DYNAMIC_ATTR_OP,
  DYNAMIC_CONTENT_TYPE_OP,
  DYNAMIC_HELPER_OP,
  DYNAMIC_MODIFIER_OP,
  ENTER_LIST_OP,
  ENTER_OP,
  EXIT_LIST_OP,
  EXIT_OP,
  FETCH_OP,
  FLUSH_ELEMENT_OP,
  GET_BLOCK_OP,
  GET_COMPONENT_LAYOUT_OP,
  GET_COMPONENT_SELF_OP,
  GET_COMPONENT_TAG_NAME_OP,
  GET_PROPERTY_OP,
  GET_VARIABLE_OP,
  HAS_BLOCK_OP,
  HAS_BLOCK_PARAMS_OP,
  HELPER_OP,
  IF_INLINE_OP,
  INVOKE_COMPONENT_LAYOUT_OP,
  INVOKE_STATIC_OP,
  INVOKE_VIRTUAL_OP,
  INVOKE_YIELD_OP,
  ITERATE_OP,
  JUMP_EQ_OP,
  JUMP_IF_OP,
  JUMP_OP,
  JUMP_UNLESS_OP,
  LOAD_OP,
  MAIN_OP,
  MODIFIER_OP,
  NOT_OP,
  OPEN_DYNAMIC_ELEMENT_OP,
  OPEN_ELEMENT_OP,
  POPULATE_LAYOUT_OP,
  POP_ARGS_OP,
  POP_DYNAMIC_SCOPE_OP,
  POP_FRAME_OP,
  POP_OP,
  POP_REMOTE_ELEMENT_OP,
  POP_SCOPE_OP,
  PREPARE_ARGS_OP,
  PRIMITIVE_OP,
  PRIMITIVE_REFERENCE_OP,
  PUSH_ARGS_OP,
  PUSH_BLOCK_SCOPE_OP,
  PUSH_COMPONENT_DEFINITION_OP,
  PUSH_DYNAMIC_COMPONENT_INSTANCE_OP,
  PUSH_DYNAMIC_SCOPE_OP,
  PUSH_EMPTY_ARGS_OP,
  PUSH_FRAME_OP,
  PUSH_REMOTE_ELEMENT_OP,
  PUSH_SYMBOL_TABLE_OP,
  PUT_COMPONENT_OPERATIONS_OP,
  REGISTER_COMPONENT_DESTRUCTOR_OP,
  REIFY_U32_OP,
  RESOLVE_CURRIED_COMPONENT_OP,
  RESOLVE_DYNAMIC_COMPONENT_OP,
  RETURN_OP,
  RETURN_TO_OP,
  ROOT_SCOPE_OP,
  SET_BLOCKS_OP,
  SET_BLOCK_OP,
  SET_NAMED_VARIABLES_OP,
  SET_VARIABLE_OP,
  SIZE_OP,
  SPREAD_BLOCK_OP,
  STATIC_ATTR_OP,
  STATIC_COMPONENT_ATTR_OP,
  TEXT_OP,
  TO_BOOLEAN_OP,
  VIRTUAL_ROOT_SCOPE_OP,
} from '@glimmer/vm-constants';

import type { NormalizedMetadata } from './metadata';

export function opcodeMetadata(
  op: VmMachineOp | VmOp,
  isMachine: 0 | 1
): Nullable<NormalizedMetadata> {
  if (import.meta.env.DEV) {
    let value = isMachine ? MACHINE_METADATA[op] : METADATA[op];

    return value || null;
  }

  return null;
}

let METADATA: Nullable<NormalizedMetadata>[] = [];
let MACHINE_METADATA: Nullable<NormalizedMetadata>[] = [];

if (import.meta.env.DEV) {
  METADATA = Array.from<Nullable<NormalizedMetadata>>({ length: SIZE_OP }).fill(null);
  MACHINE_METADATA = Array.from<Nullable<NormalizedMetadata>>({ length: SIZE_OP }).fill(null);
  MACHINE_METADATA[PUSH_FRAME_OP] = {
    name: 'PushFrame',
    mnemonic: 'pushf',
    before: null,
    stackChange: 2,
    ops: [],
    operands: 0,
    check: true,
  };

  MACHINE_METADATA[POP_FRAME_OP] = {
    name: 'PopFrame',
    mnemonic: 'popf',
    before: null,
    stackChange: -2,
    ops: [],
    operands: 0,
    check: false,
  };

  MACHINE_METADATA[INVOKE_VIRTUAL_OP] = {
    name: 'InvokeVirtual',
    mnemonic: 'vcall',
    before: null,
    stackChange: -1,
    ops: [],
    operands: 0,
    check: true,
  };

  MACHINE_METADATA[INVOKE_STATIC_OP] = {
    name: 'InvokeStatic',
    mnemonic: 'scall',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'offset',
        type: 'u32',
      },
    ],
    operands: 1,
    check: true,
  };

  MACHINE_METADATA[JUMP_OP] = {
    name: 'Jump',
    mnemonic: 'goto',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'to',
        type: 'u32',
      },
    ],
    operands: 1,
    check: true,
  };

  MACHINE_METADATA[RETURN_OP] = {
    name: 'Return',
    mnemonic: 'ret',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: false,
  };

  MACHINE_METADATA[RETURN_TO_OP] = {
    name: 'ReturnTo',
    mnemonic: 'setra',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'offset',
        type: 'i32',
      },
    ],
    operands: 1,
    check: true,
  };
  METADATA[HELPER_OP] = {
    name: 'Helper',
    mnemonic: 'ncall',
    before: null,
    stackChange: null,
    ops: [
      {
        name: 'helper',
        type: 'handle',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[DYNAMIC_HELPER_OP] = {
    name: 'DynamicHelper',
    mnemonic: 'dynamiccall',
    before: null,
    stackChange: null,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[SET_NAMED_VARIABLES_OP] = {
    name: 'SetNamedVariables',
    mnemonic: 'vsargs',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'register',
        type: 'u32',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[SET_BLOCKS_OP] = {
    name: 'SetBlocks',
    mnemonic: 'vbblocks',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'register',
        type: 'u32',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[SET_VARIABLE_OP] = {
    name: 'SetVariable',
    mnemonic: 'sbvar',
    before: null,
    stackChange: -1,
    ops: [
      {
        name: 'symbol',
        type: 'u32',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[SET_BLOCK_OP] = {
    name: 'SetBlock',
    mnemonic: 'sblock',
    before: null,
    stackChange: -3,
    ops: [
      {
        name: 'symbol',
        type: 'u32',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[GET_VARIABLE_OP] = {
    name: 'GetVariable',
    mnemonic: 'symload',
    before: null,
    stackChange: 1,
    ops: [
      {
        name: 'symbol',
        type: 'u32',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[GET_PROPERTY_OP] = {
    name: 'GetProperty',
    mnemonic: 'getprop',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'property',
        type: 'str',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[GET_BLOCK_OP] = {
    name: 'GetBlock',
    mnemonic: 'blockload',
    before: null,
    stackChange: 1,
    ops: [
      {
        name: 'block',
        type: 'u32',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[SPREAD_BLOCK_OP] = {
    name: 'SpreadBlock',
    mnemonic: 'blockspread',
    before: null,
    stackChange: 2,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[HAS_BLOCK_OP] = {
    name: 'HasBlock',
    mnemonic: 'hasblockload',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[HAS_BLOCK_PARAMS_OP] = {
    name: 'HasBlockParams',
    mnemonic: 'hasparamsload',
    before: null,
    stackChange: -2,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[CONCAT_OP] = {
    name: 'Concat',
    mnemonic: 'concat',
    before: null,
    stackChange: null,
    ops: [
      {
        name: 'count',
        type: 'u32',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[IF_INLINE_OP] = {
    name: 'IfInline',
    mnemonic: 'ifinline',
    before: null,
    stackChange: -2,
    ops: [
      {
        name: 'count',
        type: 'u32',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[NOT_OP] = {
    name: 'Not',
    mnemonic: 'not',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'count',
        type: 'u32',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[CONSTANT_OP] = {
    name: 'Constant',
    mnemonic: 'rconstload',
    before: null,
    stackChange: 1,
    ops: [
      {
        name: 'constant',
        type: 'unknown',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[CONSTANT_REFERENCE_OP] = {
    name: 'ConstantReference',
    mnemonic: 'rconstrefload',
    before: null,
    stackChange: 1,
    ops: [
      {
        name: 'constant',
        type: 'unknown',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[PRIMITIVE_OP] = {
    name: 'Primitive',
    mnemonic: 'pconstload',
    before: null,
    stackChange: 1,
    ops: [
      {
        name: 'constant',
        type: 'primitive',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[PRIMITIVE_REFERENCE_OP] = {
    name: 'PrimitiveReference',
    mnemonic: 'ptoref',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[REIFY_U32_OP] = {
    name: 'ReifyU32',
    mnemonic: 'reifyload',
    before: null,
    stackChange: 1,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[DUP_OP] = {
    name: 'Dup',
    mnemonic: 'dup',
    before: null,
    stackChange: 1,
    ops: [
      {
        name: 'register',
        type: 'u32',
      },
      {
        name: 'offset',
        type: 'u32',
      },
    ],
    operands: 2,
    check: true,
  };

  METADATA[POP_OP] = {
    name: 'Pop',
    mnemonic: 'pop',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'count',
        type: 'u32',
      },
    ],
    operands: 1,
    check: false,
  };

  METADATA[LOAD_OP] = {
    name: 'Load',
    mnemonic: 'put',
    before: null,
    stackChange: -1,
    ops: [
      {
        name: 'register',
        type: 'u32',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[FETCH_OP] = {
    name: 'Fetch',
    mnemonic: 'regload',
    before: null,
    stackChange: 1,
    ops: [
      {
        name: 'register',
        type: 'u32',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[ROOT_SCOPE_OP] = {
    name: 'RootScope',
    mnemonic: 'rscopepush',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'symbols',
        type: 'u32',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[VIRTUAL_ROOT_SCOPE_OP] = {
    name: 'VirtualRootScope',
    mnemonic: 'vrscopepush',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'register',
        type: 'u32',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[CHILD_SCOPE_OP] = {
    name: 'ChildScope',
    mnemonic: 'cscopepush',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[POP_SCOPE_OP] = {
    name: 'PopScope',
    mnemonic: 'scopepop',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[TEXT_OP] = {
    name: 'Text',
    mnemonic: 'apnd_text',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'contents',
        type: 'str',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[COMMENT_OP] = {
    name: 'Comment',
    mnemonic: 'apnd_comment',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'contents',
        type: 'str',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[APPEND_HTML_OP] = {
    name: 'AppendHTML',
    mnemonic: 'apnd_dynhtml',
    before: null,
    stackChange: -1,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[APPEND_SAFE_HTML_OP] = {
    name: 'AppendSafeHTML',
    mnemonic: 'apnd_dynshtml',
    before: null,
    stackChange: -1,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[APPEND_DOCUMENT_FRAGMENT_OP] = {
    name: 'AppendDocumentFragment',
    mnemonic: 'apnd_dynfrag',
    before: null,
    stackChange: -1,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[APPEND_NODE_OP] = {
    name: 'AppendNode',
    mnemonic: 'apnd_dynnode',
    before: null,
    stackChange: -1,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[APPEND_TEXT_OP] = {
    name: 'AppendText',
    mnemonic: 'apnd_dyntext',
    before: null,
    stackChange: -1,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[OPEN_ELEMENT_OP] = {
    name: 'OpenElement',
    mnemonic: 'apnd_tag',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'tag',
        type: 'str',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[OPEN_DYNAMIC_ELEMENT_OP] = {
    name: 'OpenDynamicElement',
    mnemonic: 'apnd_dyntag',
    before: null,
    stackChange: -1,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[PUSH_REMOTE_ELEMENT_OP] = {
    name: 'PushRemoteElement',
    mnemonic: 'apnd_remotetag',
    before: null,
    stackChange: -3,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[STATIC_ATTR_OP] = {
    name: 'StaticAttr',
    mnemonic: 'apnd_attr',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'name',
        type: 'str',
      },
      {
        name: 'value',
        type: 'str',
      },
      {
        name: 'namespace',
        type: 'option-str',
      },
    ],
    operands: 3,
    check: true,
  };

  METADATA[DYNAMIC_ATTR_OP] = {
    name: 'DynamicAttr',
    mnemonic: 'apnd_dynattr',
    before: null,
    stackChange: -1,
    ops: [
      {
        name: 'name',
        type: 'str',
      },
      {
        name: 'trusting',
        type: 'bool',
      },
      {
        name: 'namespace',
        type: 'option-str',
      },
    ],
    operands: 3,
    check: true,
  };

  METADATA[COMPONENT_ATTR_OP] = {
    name: 'ComponentAttr',
    mnemonic: 'apnd_cattr',
    before: null,
    stackChange: -1,
    ops: [
      {
        name: 'name',
        type: 'str',
      },
      {
        name: 'trusting',
        type: 'bool',
      },
      {
        name: 'namespace',
        type: 'option-str',
      },
    ],
    operands: 3,
    check: true,
  };

  METADATA[FLUSH_ELEMENT_OP] = {
    name: 'FlushElement',
    mnemonic: 'apnd_flushtag',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[CLOSE_ELEMENT_OP] = {
    name: 'CloseElement',
    mnemonic: 'apnd_closetag',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[POP_REMOTE_ELEMENT_OP] = {
    name: 'PopRemoteElement',
    mnemonic: 'apnd_closeremotetag',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[MODIFIER_OP] = {
    name: 'Modifier',
    mnemonic: 'apnd_modifier',
    before: null,
    stackChange: -1,
    ops: [
      {
        name: 'helper',
        type: 'handle',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[DYNAMIC_MODIFIER_OP] = {
    name: 'DynamicModifier',
    mnemonic: 'apnd_dynmodifier',
    before: null,
    stackChange: -2,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[BIND_DYNAMIC_SCOPE_OP] = {
    name: 'BindDynamicScope',
    mnemonic: 'setdynscope',
    before: null,
    stackChange: null,
    ops: [
      {
        name: 'names',
        type: 'str-array',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[PUSH_DYNAMIC_SCOPE_OP] = {
    name: 'PushDynamicScope',
    mnemonic: 'dynscopepush',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[POP_DYNAMIC_SCOPE_OP] = {
    name: 'PopDynamicScope',
    mnemonic: 'dynscopepop',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[COMPILE_BLOCK_OP] = {
    name: 'CompileBlock',
    mnemonic: 'cmpblock',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[PUSH_BLOCK_SCOPE_OP] = {
    name: 'PushBlockScope',
    mnemonic: 'scopeload',
    before: null,
    stackChange: 1,
    ops: [
      {
        name: 'scope',
        type: 'scope',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[PUSH_SYMBOL_TABLE_OP] = {
    name: 'PushSymbolTable',
    mnemonic: 'dsymload',
    before: null,
    stackChange: 1,
    ops: [
      {
        name: 'table',
        type: 'symbol-table',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[INVOKE_YIELD_OP] = {
    name: 'InvokeYield',
    mnemonic: 'invokeyield',
    before: null,
    stackChange: null,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[JUMP_IF_OP] = {
    name: 'JumpIf',
    mnemonic: 'iftrue',
    before: null,
    stackChange: -1,
    ops: [
      {
        name: 'to',
        type: 'u32',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[JUMP_UNLESS_OP] = {
    name: 'JumpUnless',
    mnemonic: 'iffalse',
    before: null,
    stackChange: -1,
    ops: [
      {
        name: 'to',
        type: 'u32',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[JUMP_EQ_OP] = {
    name: 'JumpEq',
    mnemonic: 'ifeq',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'to',
        type: 'i32',
      },
      {
        name: 'comparison',
        type: 'i32',
      },
    ],
    operands: 2,
    check: true,
  };

  METADATA[ASSERT_SAME_OP] = {
    name: 'AssertSame',
    mnemonic: 'assert_eq',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[ENTER_OP] = {
    name: 'Enter',
    mnemonic: 'blk_start',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'args',
        type: 'u32',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[EXIT_OP] = {
    name: 'Exit',
    mnemonic: 'blk_end',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[TO_BOOLEAN_OP] = {
    name: 'ToBoolean',
    mnemonic: 'anytobool',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[ENTER_LIST_OP] = {
    name: 'EnterList',
    mnemonic: 'list_start',
    before: null,
    stackChange: null,
    ops: [
      {
        name: 'address',
        type: 'u32',
      },
      {
        name: 'address',
        type: 'u32',
      },
    ],
    operands: 2,
    check: true,
  };

  METADATA[EXIT_LIST_OP] = {
    name: 'ExitList',
    mnemonic: 'list_end',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[ITERATE_OP] = {
    name: 'Iterate',
    mnemonic: 'iter',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'end',
        type: 'u32',
      },
    ],
    operands: 1,
    check: false,
  };

  METADATA[MAIN_OP] = {
    name: 'Main',
    mnemonic: 'main',
    before: null,
    stackChange: -2,
    ops: [
      {
        name: 'state',
        type: 'register',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[CONTENT_TYPE_OP] = {
    name: 'ContentType',
    mnemonic: 'ctload',
    before: null,
    stackChange: 1,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[DYNAMIC_CONTENT_TYPE_OP] = {
    name: 'DynamicContentType',
    mnemonic: 'dctload',
    before: null,
    stackChange: 1,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[CURRY_OP] = {
    name: 'Curry',
    mnemonic: 'curry',
    before: null,
    stackChange: null,
    ops: [
      {
        name: 'type',
        type: 'u32',
      },
      {
        name: 'is-strict',
        type: 'bool',
      },
    ],
    operands: 2,
    check: true,
  };

  METADATA[PUSH_COMPONENT_DEFINITION_OP] = {
    name: 'PushComponentDefinition',
    mnemonic: 'cmload',
    before: null,
    stackChange: 1,
    ops: [
      {
        name: 'spec',
        type: 'handle',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[PUSH_DYNAMIC_COMPONENT_INSTANCE_OP] = {
    name: 'PushDynamicComponentInstance',
    mnemonic: 'dciload',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[RESOLVE_DYNAMIC_COMPONENT_OP] = {
    name: 'ResolveDynamicComponent',
    mnemonic: 'cdload',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'owner',
        type: 'owner',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[RESOLVE_CURRIED_COMPONENT_OP] = {
    name: 'ResolveCurriedComponent',
    mnemonic: 'ccload',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[PUSH_ARGS_OP] = {
    name: 'PushArgs',
    mnemonic: 'argsload',
    before: null,
    stackChange: null,
    ops: [
      {
        name: 'names',
        type: 'str-array',
      },
      {
        name: 'block-names',
        type: 'str-array',
      },
      {
        name: 'flags',
        type: 'u32',
      },
    ],
    operands: 3,
    check: true,
  };

  METADATA[PUSH_EMPTY_ARGS_OP] = {
    name: 'PushEmptyArgs',
    mnemonic: 'emptyargsload',
    before: null,
    stackChange: 1,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[POP_ARGS_OP] = {
    name: 'PopArgs',
    mnemonic: 'argspop',
    before: null,
    stackChange: null,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[PREPARE_ARGS_OP] = {
    name: 'PrepareArgs',
    mnemonic: 'argsprep',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'state',
        type: 'register',
      },
    ],
    operands: 1,
    check: false,
  };

  METADATA[CAPTURE_ARGS_OP] = {
    name: 'CaptureArgs',
    mnemonic: 'argscapture',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[CREATE_COMPONENT_OP] = {
    name: 'CreateComponent',
    mnemonic: 'comp_create',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'flags',
        type: 'u32',
      },
      {
        name: 'state',
        type: 'register',
      },
    ],
    operands: 2,
    check: true,
  };

  METADATA[REGISTER_COMPONENT_DESTRUCTOR_OP] = {
    name: 'RegisterComponentDestructor',
    mnemonic: 'comp_dest',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'state',
        type: 'register',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[PUT_COMPONENT_OPERATIONS_OP] = {
    name: 'PutComponentOperations',
    mnemonic: 'comp_elops',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[GET_COMPONENT_SELF_OP] = {
    name: 'GetComponentSelf',
    mnemonic: 'comp_selfload',
    before: null,
    stackChange: 1,
    ops: [
      {
        name: 'state',
        type: 'register',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[GET_COMPONENT_TAG_NAME_OP] = {
    name: 'GetComponentTagName',
    mnemonic: 'comp_tagload',
    before: null,
    stackChange: 1,
    ops: [
      {
        name: 'state',
        type: 'register',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[GET_COMPONENT_LAYOUT_OP] = {
    name: 'GetComponentLayout',
    mnemonic: 'comp_layoutload',
    before: null,
    stackChange: 2,
    ops: [
      {
        name: 'state',
        type: 'register',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[BIND_EVAL_SCOPE_OP] = {
    name: 'BindEvalScope',
    mnemonic: 'eval_scope',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'state',
        type: 'register',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[POPULATE_LAYOUT_OP] = {
    name: 'PopulateLayout',
    mnemonic: 'comp_layoutput',
    before: null,
    stackChange: -2,
    ops: [
      {
        name: 'state',
        type: 'register',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[INVOKE_COMPONENT_LAYOUT_OP] = {
    name: 'InvokeComponentLayout',
    mnemonic: 'comp_invokelayout',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'state',
        type: 'register',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[BEGIN_COMPONENT_TRANSACTION_OP] = {
    name: 'BeginComponentTransaction',
    mnemonic: 'comp_begin',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[COMMIT_COMPONENT_TRANSACTION_OP] = {
    name: 'CommitComponentTransaction',
    mnemonic: 'comp_commit',
    before: null,
    stackChange: 0,
    ops: [],
    operands: 0,
    check: true,
  };

  METADATA[DID_CREATE_ELEMENT_OP] = {
    name: 'DidCreateElement',
    mnemonic: 'comp_created',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'state',
        type: 'register',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[DID_RENDER_LAYOUT_OP] = {
    name: 'DidRenderLayout',
    mnemonic: 'comp_rendered',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'state',
        type: 'register',
      },
    ],
    operands: 1,
    check: true,
  };

  METADATA[DEBUGGER_OP] = {
    name: 'Debugger',
    mnemonic: 'debugger',
    before: null,
    stackChange: 0,
    ops: [
      {
        name: 'symbols',
        type: 'str-array',
      },
      {
        name: 'debugInfo',
        type: 'array',
      },
    ],
    operands: 2,
    check: true,
  };
}

METADATA[STATIC_COMPONENT_ATTR_OP] = {
  name: 'StaticComponentAttr',
  mnemonic: 'comp_attr',
  before: null,
  stackChange: 0,
  ops: [
    {
      name: 'state',
      type: 'str',
    },
    {
      name: 'value',
      type: 'str',
    },
    {
      name: 'namespace',
      type: 'option-str',
    },
  ],
  operands: 3,
  check: true,
};
